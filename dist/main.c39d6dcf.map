{"version":3,"sources":["ts/State/State.ts","ts/Transition/Transition.ts","ts/Misc/Misc.ts","ts/Automaton/Automaton.ts","main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACM;AAIL;;;;;AAKA,eAAY,EAAZ,EAAsB;AAAA;;AAAA;;AAKN,OAAA,KAAA,GAAQ;AAAA,WAAM,KAAI,CAAC,EAAX;AAAA,GAAR;;AACA,OAAA,cAAA,GAAiB;AAAA,WAAM,KAAI,CAAC,WAAX;AAAA,GAAjB;;AAEA,OAAA,KAAA,GAAQ,UAAA,EAAE,EAAG;AAC5B,IAAA,KAAI,CAAC,EAAL,GAAU,EAAV;AACA,GAFe;AAIhB;;;;;;;;AAMgB,OAAA,aAAA,GAAgB,UAAC,CAAD,EAAkB;AACjD,IAAA,KAAI,CAAC,WAAL,CAAiB,GAAjB,CAAqB,CAArB;AACA,GAFe;AAIhB;;;;;;;;AAMO,OAAA,sBAAA,GAAyB,UAAC,MAAD,EAAmB;AAClD,WAAO,mBAAI,KAAI,CAAC,WAAT,EAAsB,MAAtB,CAA6B,UAAA,UAAU,EAAG;AAChD,UAAI,UAAU,CAAC,cAAX,EAAJ,EAAiC;AAChC,eAAO,MAAM,CAAC,MAAP,KAAkB,CAAlB,GACJ,UAAU,CAAC,SAAX,MAA0B,MAA1B,IACA,MAAM,IAAI,UAAU,CAAC,cAAX,EAFN,GAGJ,KAHH;AAIA,OALD,MAKO;AACN,eAAO,UAAU,CAAC,SAAX,OAA2B,MAAlC;AACA;AACD,KATM,CAAP;AAUA,GAXM;;AA3BN,OAAK,EAAL,GAAU,EAAV;AACA,OAAK,WAAL,GAAmB,IAAI,GAAJ,EAAnB;AACA;;AAuCO,OAAA,CAAA,KAAA,GAAA,KAAA;;;;;;;;;;IClDH,aAKL,oBAAY,MAAZ,EAA4B,WAA5B,EAAgD,WAAhD,EAAoE;AAAA;;AAAA;;AAuBpD,OAAA,SAAA,GAAY;AAAA,WAAM,KAAI,CAAC,MAAX;AAAA,GAAZ;;AACA,OAAA,cAAA,GAAiB;AAAA,WAAM,KAAI,CAAC,WAAX;AAAA,GAAjB;;AACA,OAAA,cAAA,GAAiB;AAAA,WAAM,KAAI,CAAC,WAAX;AAAA,GAAjB;;AAEhB,OAAA,cAAA,GAAiB,YAAK;AACrB,WAAO,KAAI,CAAC,WAAL,GAAmB,IAAnB,GAA0B,KAAjC;AACA,GAFD,CA3BoE,CACnE;;;AACA,MAAI,WAAJ,EAAiB;AAChB,QAAI,MAAM,CAAC,MAAP,IAAiB,CAAjB,IAAsB,WAAW,CAAC,MAAZ,IAAsB,CAAhD,EAAmD;AAClD,MAAA,OAAO,CAAC,GAAR,CACC,wDADD;AAGA,aAAO,IAAP;AACA;;AACD,QAAI,WAAW,CAAC,UAAZ,CAAuB,CAAvB,KAA6B,MAAM,CAAC,UAAP,CAAkB,CAAlB,CAAjC,EAAuD;AACtD,MAAA,OAAO,CAAC,GAAR,CAAY,kDAAZ;AACA,aAAO,IAAP;AACA;;AACD,SAAK,WAAL,GAAmB,WAAnB;AACA,GAZD,MAYO;AACN,SAAK,WAAL,GAAmB,IAAnB;AACA,GAhBkE,CAiBnE;;;AACA,OAAK,MAAL,GAAc,MAAd,CAlBmE,CAmBnE;;AACA,OAAK,WAAL,GAAmB,WAAnB;AACA;;AAUO,OAAA,CAAA,UAAA,GAAA,UAAA;;;;;;;;;;;;;;;AClCT,IAAU,IAAV;;AAAA,CAAA,UAAU,IAAV,EAAc;AACA,EAAA,IAAA,CAAA,OAAA,GAAkB,QAAlB;AAEb;;;;;;;;;;;AAUa,EAAA,IAAA,CAAA,IAAA,GAAO,UAAC,MAAD,EAAqB,MAArB,EAAuC;AAC1D,QAAI,CAAJ;AACA,IAAA,CAAC,GAAG,IAAA,CAAA,cAAA,CAAe,IAAA,CAAA,IAAA,CAAK,MAAL,EAAa,MAAb,CAAf,CAAJ;AACA,WAAO,CAAP;AACA,GAJY;AAMb;;;;;;;;;;;;AAUa,EAAA,IAAA,CAAA,IAAA,GAAO,UAAC,MAAD,EAAqB,MAArB,EAAuC;AAC1D,QAAM,MAAM,GAAG,mBAAI,MAAJ,EAAY,GAAZ,CAAgB,UAAA,KAAK;AAAA,aAAI,UAAU,CAAC,KAAD,EAAQ,MAAR,CAAd;AAAA,KAArB,CAAf;;AACA,WAAO,MAAM,CAAC,MAAP,CAAc,UAAC,KAAD,EAAQ,GAAR,EAAe;AACnC,MAAA,GAAG,CAAC,OAAJ,CAAY,UAAA,KAAK,EAAG;AACnB,QAAA,KAAK,CAAC,GAAN,CAAU,KAAV;AACA,OAFD;AAGA,aAAO,KAAP;AACA,KALM,EAKJ,IAAI,GAAJ,EALI,CAAP;AAMA,GARY;;AAUb,MAAM,UAAU,GAAG,SAAb,UAAa,CAAC,KAAD,EAAe,MAAf,EAAiC;AACnD,WAAO,IAAI,GAAJ,CACN,mBAAI,KAAK,CAAC,cAAN,GAAuB,MAAvB,EAAJ,EACE,MADF,CACS,UAAA,UAAU;AAAA,aAAI,UAAU,CAAC,SAAX,OAA2B,MAA/B;AAAA,KADnB,EAEE,GAFF,CAEM,UAAA,UAAU;AAAA,aAAI,UAAU,CAAC,cAAX,EAAJ;AAAA,KAFhB,CADM,CAAP;AAKA,GAND;AAQA;;;;;;;;AAMa,EAAA,IAAA,CAAA,cAAA,GAAiB,UAAC,MAAD,EAAuB;AACpD,QAAM,WAAW,GAAG,mBAAI,MAAJ,EAAY,GAAZ,CAAgB,oBAAhB,CAApB;;AACA,WAAO,WAAW,CAAC,MAAZ,CAAmB,UAAC,KAAD,EAAQ,GAAR,EAAe;AACxC,MAAA,GAAG,CAAC,OAAJ,CAAY,UAAA,KAAK,EAAG;AACnB,QAAA,KAAK,CAAC,GAAN,CAAU,KAAV;AACA,OAFD;AAGA,aAAO,KAAP;AACA,KALM,EAKJ,IAAI,GAAJ,EALI,CAAP;AAMA,GARY;AAUb;;;;;;;;AAMA,MAAM,oBAAoB,GAAG,SAAvB,oBAAuB,CAAC,KAAD,EAAiB;AAC7C,WAAO,IAAI,GAAJ,CACN,mBAAI,KAAK,CAAC,cAAN,GAAuB,MAAvB,EAAJ,EACE,MADF,CACS,UAAA,UAAU;AAAA,aAAI,UAAU,CAAC,SAAX,OAA2B,IAAA,CAAA,OAA/B;AAAA,KADnB,EAEE,GAFF,CAEM,UAAA,UAAU;AAAA,aAAI,UAAU,CAAC,cAAX,EAAJ;AAAA,KAFhB,CADM,CAAP;AAKA,GAND;;AAeM,EAAA,IAAA,CAAA,mBAAA,GAAsB,UAAC,MAAD,EAAiB,WAAjB,EAAwC;AACnE,QAAI,MAAM,CAAC,MAAP,KAAkB,CAAlB,IAAuB,WAAW,CAAC,MAAZ,KAAuB,CAAlD,EAAqD;AACpD,aAAO,IAAP;AACA;;AACD,QAAM,KAAK,GAAG,MAAM,CAAC,UAAP,CAAkB,CAAlB,CAAd;AACA,QAAM,GAAG,GAAG,WAAW,CAAC,UAAZ,CAAuB,CAAvB,CAAZ;AACA,QAAM,OAAO,GAAa,EAA1B;;AACA,SAAK,IAAI,KAAK,GAAG,KAAjB,EAAwB,KAAK,IAAI,GAAjC,EAAsC,KAAK,EAA3C,EAA+C;AAC9C,MAAA,OAAO,CAAC,IAAR,CAAa,MAAM,CAAC,YAAP,CAAoB,KAApB,CAAb;AACA;;AACD,WAAO,OAAP;AACA,GAXK;AAaN;;;;;;;;;;;;AAWA,CA5GD,EAAU,IAAI,KAAJ,IAAI,GAAA,EAAA,CAAd;;AA8GA,OAAA,CAAA,OAAA,GAAe,IAAf;;;;;;;;;;;;;;;;;;;;;;;;AClHA,IAAA,OAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AACA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;IAEM;AA8CL;;;;;AAKA,mBAAY,IAAZ,EAAwB;AAAA;;AAAA;;AAWR,OAAA,OAAA,GAAU;AAAA,WAAM,KAAI,CAAC,IAAX;AAAA,GAAV;;AACA,OAAA,QAAA,GAAW;AAAA,WAAM,KAAI,CAAC,KAAX;AAAA,GAAX;;AACA,OAAA,SAAA,GAAY;AAAA,WAAM,KAAI,CAAC,MAAX;AAAA,GAAZ;;AACA,OAAA,aAAA,GAAgB;AAAA,WAAM,KAAI,CAAC,UAAX;AAAA,GAAhB;;AACA,OAAA,eAAA,GAAkB;AAAA,WAAM,KAAI,CAAC,YAAX;AAAA,GAAlB;AAEhB;;;;;;;;;AAOgB,OAAA,WAAA,GAAc,UAAC,MAAD,EAAiB,WAAjB,EAAyC;AACtE,QAAI,MAAJ,EAAY,MAAZ;;AACA,QAAI,KAAI,CAAC,MAAL,CAAY,IAAZ,IAAoB,CAAxB,EAA2B;AAC1B,MAAA,MAAM,GAAG,IAAI,OAAA,CAAA,KAAJ,CAAU,CAAV,CAAT;AACA,MAAA,MAAM,GAAG,IAAI,OAAA,CAAA,KAAJ,CAAU,CAAV,CAAT;AACA,KAHD,MAGO;AACN,MAAA,MAAM,GAAG,IAAI,OAAA,CAAA,KAAJ,CAAU,KAAI,CAAC,MAAL,CAAY,IAAtB,CAAT;AACA,MAAA,MAAM,GAAG,IAAI,OAAA,CAAA,KAAJ,CAAU,KAAI,CAAC,MAAL,CAAY,IAAZ,GAAmB,CAA7B,CAAT;AACA;;AACD,QAAM,UAAU,GAAG,IAAI,YAAA,CAAA,UAAJ,CAAe,MAAf,EAAuB,MAAvB,EAA+B,WAA/B,CAAnB;AACA,IAAA,MAAM,CAAC,aAAP,CAAqB,UAArB,EAVsE,CAYtE;;AACA,QAAI,UAAU,CAAC,cAAX,EAAJ,EAAiC;AAChC,UAAM,OAAO,GAAG,MAAA,CAAA,OAAA,CAAK,mBAAL,CAAyB,MAAzB,EAAiC,WAAjC,CAAhB;AACA,MAAA,OAAO,CAAC,OAAR,CAAgB,UAAA,MAAM,EAAG;AACxB,QAAA,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,MAAf;AACA,OAFD;AAGA,KALD,MAKO;AACN,MAAA,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,MAAf;AACA,KApBqE,CAsBtE;;;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,MAAhB;;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,MAAhB;;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,MAAlB;;AACA,IAAA,KAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,MAAtB;AACA,GA3Be;AA6BhB;;;;;;;;;AAOgB,OAAA,OAAA,GAAU,UAAC,SAAD,EAAyB;AAClD,QAAI,QAAQ,GAAG,IAAI,OAAA,CAAA,KAAJ,CAAU,KAAI,CAAC,MAAL,CAAY,IAAZ,GAAmB,SAAS,CAAC,MAAV,CAAiB,IAA9C,CAAf;AACA,QAAI,QAAQ,GAAG,IAAI,OAAA,CAAA,KAAJ,CAAU,KAAI,CAAC,MAAL,CAAY,IAAZ,GAAmB,SAAS,CAAC,MAAV,CAAiB,IAApC,GAA2C,CAArD,CAAf;AAEA,QAAM,eAAe,GAAG,IAAI,YAAA,CAAA,UAAJ,CAAe,MAAA,CAAA,OAAA,CAAK,OAApB,EAA6B,QAA7B,CAAxB;AACA,QAAM,sBAAsB,GAAG,IAAI,YAAA,CAAA,UAAJ,CAC9B,MAAA,CAAA,OAAA,CAAK,OADyB,EAE9B,KAAI,CAAC,UAFyB,CAA/B;AAIA,QAAM,sBAAsB,GAAG,IAAI,YAAA,CAAA,UAAJ,CAC9B,MAAA,CAAA,OAAA,CAAK,OADyB,EAE9B,SAAS,CAAC,UAFoB,CAA/B,CATkD,CAalD;;AACA,uBAAI,KAAI,CAAC,YAAT,EAAuB,OAAvB,CAA+B,UAAA,WAAW,EAAG;AAC5C,MAAA,WAAW,CAAC,aAAZ,CAA0B,eAA1B;AACA,KAFD,EAdkD,CAiBlD;;;AACA,uBAAI,SAAS,CAAC,YAAd,EAA4B,OAA5B,CAAoC,UAAA,WAAW,EAAG;AACjD,MAAA,WAAW,CAAC,aAAZ,CAA0B,eAA1B;AACA,KAFD,EAlBkD,CAqBlD;;;AACA,IAAA,KAAI,CAAC,YAAL,CAAkB,KAAlB,GAtBkD,CAuBlD;;;AACA,IAAA,KAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,QAAtB,EAxBkD,CA0BlD;AACA;;;AACA,QAAM,SAAS,sBAAO,SAAS,CAAC,MAAjB,CAAf;;AACA,IAAA,SAAS,CAAC,OAAV,CAAkB,UAAC,KAAD,EAAQ,KAAR,EAAiB;AAClC,MAAA,KAAK,CAAC,KAAN,CAAY,KAAI,CAAC,MAAL,CAAY,IAAZ,GAAmB,KAA/B;AACA,KAFD;AAGA,IAAA,SAAS,CAAC,OAAV,CAAkB,UAAA,KAAK,EAAG;AACzB,MAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,KAAhB;AACA,KAFD,EAhCkD,CAoClD;;AACA,uBAAI,SAAS,CAAC,KAAd,EAAqB,OAArB,CAA6B,UAAA,MAAM,EAAG;AACrC,MAAA,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,MAAf;AACA,KAFD,EArCkD,CAwClD;;;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,QAAhB;;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,QAAhB,EA1CkD,CA4ClD;;;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,QAAlB,CA7CkD,CA8ClD;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,aAAhB,CAA8B,sBAA9B;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,aAAhB,CAA8B,sBAA9B,EAhDkD,CAiDlD;;AACA,GAlDe;AAoDhB;;;;;;;;;AAOgB,OAAA,aAAA,GAAgB,UAAC,SAAD,EAAyB;AACxD;AACA,QAAM,cAAc,GAAG,mBAAI,SAAS,CAAC,SAAV,EAAJ,EAA2B,MAA3B,CACtB,UAAA,KAAK;AAAA,aAAI,KAAK,KAAK,SAAS,CAAC,UAAxB;AAAA,KADiB,CAAvB,CAFwD,CAMxD;;;AACA,IAAA,cAAc,CAAC,OAAf,CAAuB,UAAC,KAAD,EAAQ,KAAR,EAAiB;AACvC,MAAA,KAAK,CAAC,KAAN,CAAY,KAAI,CAAC,MAAL,CAAY,IAAZ,GAAmB,KAA/B;AACA,KAFD,EAPwD,CAWxD;;AACA,uBAAI,SAAS,CAAC,UAAV,CAAqB,cAArB,EAAJ,EAA2C,OAA3C,CAAmD,UAAA,UAAU,EAAG;AAC/D,yBAAI,KAAI,CAAC,YAAT,EAAuB,CAAvB,EAA0B,aAA1B,CAAwC,UAAxC;AACA,KAFD;;AAIA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAAS,CAAC,KAAV,CAAgB,IAApC,EAA0C,CAAC,EAA3C,EAA+C;AAC9C,MAAA,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,mBAAI,SAAS,CAAC,KAAd,EAAqB,CAArB,CAAf;AACA;;AAED,IAAA,cAAc,CAAC,OAAf,CAAuB,UAAA,KAAK,EAAG;AAC9B,MAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,KAAhB;AACA,KAFD;;AAIA,IAAA,KAAI,CAAC,YAAL,CAAkB,KAAlB;;AACA,IAAA,KAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,mBAAI,SAAS,CAAC,YAAd,EAA4B,CAA5B,CAAtB;AACA,GA1Be;AA2BhB;;;;;;;AAKgB,OAAA,YAAA,GAAe,YAAK;AACnC;AACA,QAAM,cAAc,GAAG,IAAI,OAAA,CAAA,KAAJ,CAAU,KAAI,CAAC,MAAL,CAAY,IAAtB,CAAvB,CAFmC,CAGnC;;AACA,QAAM,cAAc,GAAG,IAAI,OAAA,CAAA,KAAJ,CAAU,KAAI,CAAC,MAAL,CAAY,IAAZ,GAAmB,CAA7B,CAAvB,CAJmC,CAKnC;;AACA,QAAM,eAAe,GAAG,IAAI,YAAA,CAAA,UAAJ,CAAe,MAAA,CAAA,OAAA,CAAK,OAApB,EAA6B,cAA7B,CAAxB,CANmC,CAOnC;;AACA,QAAM,eAAe,GAAG,IAAI,YAAA,CAAA,UAAJ,CAAe,MAAA,CAAA,OAAA,CAAK,OAApB,EAA6B,KAAI,CAAC,UAAlC,CAAxB,CARmC,CASnC;;AACA,uBAAI,KAAI,CAAC,MAAT,EACE,MADF,CACS,UAAA,KAAK;AAAA,aAAI,KAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,KAAtB,CAAJ;AAAA,KADd,EAEE,OAFF,CAEU,UAAA,WAAW,EAAG;AACtB,MAAA,WAAW,CAAC,aAAZ,CAA0B,eAA1B;AACA,KAJF,EAVmC,CAenC;;;AACA,IAAA,KAAI,CAAC,YAAL,CAAkB,KAAlB,GAhBmC,CAiBnC;;;AACA,IAAA,KAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,cAAtB,EAlBmC,CAmBnC;;;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,cAAhB;;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,cAAhB,EArBmC,CAsBnC;;;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,cAAlB,CAvBmC,CAwBnC;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,aAAhB,CAA8B,eAA9B;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,aAAhB,CAA8B,eAA9B;AACA,GA3Be;AA6BhB;;;;;;;AAKgB,OAAA,YAAA,GAAe,YAAK;AACnC;AACA,QAAI,KAAI,CAAC,YAAL,CAAkB,IAAlB,IAA0B,CAA9B,EAAiC;AAChC,MAAA,OAAO,CAAC,GAAR,CAAY,6CAAZ;AACA;AACA,KALkC,CAOnC;;;AACA,QAAM,cAAc,GAAG,IAAI,OAAA,CAAA,KAAJ,CAAU,KAAI,CAAC,MAAL,CAAY,IAAtB,CAAvB,CARmC,CASnC;;AACA,QAAM,cAAc,GAAG,IAAI,OAAA,CAAA,KAAJ,CAAU,KAAI,CAAC,MAAL,CAAY,IAAZ,GAAmB,CAA7B,CAAvB,CAVmC,CAWnC;;AACA,QAAM,eAAe,GAAG,IAAI,YAAA,CAAA,UAAJ,CAAe,MAAA,CAAA,OAAA,CAAK,OAApB,EAA6B,cAA7B,CAAxB,CAZmC,CAanC;;AACA,QAAM,qBAAqB,GAAG,IAAI,YAAA,CAAA,UAAJ,CAC7B,MAAA,CAAA,OAAA,CAAK,OADwB,EAE7B,KAAI,CAAC,UAFwB,CAA9B,CAdmC,CAmBnC;;AACA,QAAM,cAAc,GAAG,mBAAI,KAAI,CAAC,YAAT,EAAuB,CAAvB,CAAvB;;AACA,IAAA,cAAc,CAAC,aAAf,CAA6B,qBAA7B;AACA,IAAA,cAAc,CAAC,aAAf,CAA6B,eAA7B;AAEA,IAAA,cAAc,CAAC,aAAf,CAA6B,qBAA7B;;AACA,IAAA,KAAI,CAAC,YAAL,CAAkB,KAAlB;;AACA,IAAA,KAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,cAAtB;;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,cAAlB;;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,cAAhB;;AACA,IAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,cAAhB;AACA,GA9Be;AAgChB;;;;;;;AAKgB,OAAA,UAAA,GAAa,YAAK;AACjC;AACA,IAAA,KAAI,CAAC,YAAL;;AACA,QAAM,eAAe,GAAG,IAAI,YAAA,CAAA,UAAJ,CACvB,MAAA,CAAA,OAAA,CAAK,OADkB,EAEvB,mBAAI,KAAI,CAAC,YAAT,EAAuB,CAAvB,CAFuB,CAAxB,CAHiC,CAOjC;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,aAAhB,CAA8B,eAA9B;AACA,GATe;AAWhB;;;;;;;;AAMgB,OAAA,IAAA,GAAO,YAAK;AAC3B;AACA,QAAM,IAAI,GAAG,IAAI,SAAJ,CAAc,KAAI,CAAC,IAAnB,CAAb,CAF2B,CAI3B;;AACA,uBAAI,KAAI,CAAC,SAAL,EAAJ,EAAsB,OAAtB,CAA8B,UAAA,KAAK,EAAG;AACrC,yBAAI,KAAK,CAAC,cAAN,EAAJ,EAA4B,OAA5B,CAAoC,UAAA,UAAU,EAAG;AAChD,QAAA,IAAI,CAAC,gBAAL,CACC,KAAK,CAAC,KAAN,EADD,EAEC,UAAU,CAAC,SAAX,EAFD,EAGC,UAAU,CAAC,cAAX,EAHD,EAIC,UAAU,CAAC,cAAX,GAA4B,KAA5B,EAJD;AAMA,OAPD;AAQA,KATD,EAL2B,CAe3B;;;AACA,IAAA,IAAI,CAAC,UAAL,GAAkB,mBAAI,IAAI,CAAC,SAAL,EAAJ,EAAsB,IAAtB,CACjB,UAAA,KAAK;AAAA,aAAI,KAAK,CAAC,KAAN,OAAkB,KAAI,CAAC,aAAL,GAAqB,KAArB,EAAtB;AAAA,KADY,CAAlB,CAhB2B,CAmB3B;;AACA,uBAAI,KAAI,CAAC,eAAL,EAAJ,EAA4B,OAA5B,CAAoC,UAAA,WAAW,EAAG;AACjD,MAAA,IAAI,CAAC,eAAL,GAAuB,GAAvB,CACC,mBAAI,IAAI,CAAC,SAAL,EAAJ,EAAsB,IAAtB,CACC,UAAA,KAAK;AAAA,eAAI,KAAK,CAAC,KAAN,OAAkB,WAAW,CAAC,KAAZ,EAAtB;AAAA,OADN,CADD;AAKA,KAND;;AAQA,WAAO,IAAP;AACA,GA7Be;AA+BhB;;;;;;;;;;;;;;;;;;AAgBQ,OAAA,gBAAA,GAAmB,UAC1B,aAD0B,EAE1B,MAF0B,EAG1B,WAH0B,EAI1B,aAJ0B,EAKvB;AACH,QAAI,WAAW,GAAG,mBAAI,KAAI,CAAC,MAAT,EAAiB,IAAjB,CACjB,UAAA,KAAK;AAAA,aAAI,KAAK,CAAC,KAAN,OAAkB,aAAtB;AAAA,KADY,CAAlB;;AAGA,QAAI,WAAW,GAAG,mBAAI,KAAI,CAAC,MAAT,EAAiB,IAAjB,CACjB,UAAA,KAAK;AAAA,aAAI,KAAK,CAAC,KAAN,OAAkB,aAAtB;AAAA,KADY,CAAlB;;AAGA,QAAI,CAAC,WAAL,EAAkB;AACjB,MAAA,WAAW,GAAG,IAAI,OAAA,CAAA,KAAJ,CAAU,aAAV,CAAd;;AACA,MAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,WAAhB;AACA;;AAED,QAAI,CAAC,WAAL,EAAkB;AACjB,MAAA,WAAW,GAAG,IAAI,OAAA,CAAA,KAAJ,CAAU,aAAV,CAAd;;AACA,MAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,WAAhB;AACA;;AACD,QAAM,UAAU,GAAG,IAAI,YAAA,CAAA,UAAJ,CAAe,MAAf,EAAuB,WAAvB,EAAoC,WAApC,CAAnB;AACA,IAAA,WAAW,CAAC,aAAZ,CAA0B,UAA1B;;AAEA,QAAI,UAAU,CAAC,cAAX,EAAJ,EAAiC;AAChC,UAAM,OAAO,GAAG,MAAA,CAAA,OAAA,CAAK,mBAAL,CAAyB,MAAzB,EAAiC,WAAjC,CAAhB;AACA,MAAA,OAAO,CAAC,OAAR,CAAgB,UAAA,MAAM,EAAG;AACxB,QAAA,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,MAAf;AACA,OAFD;AAGA,KALD,MAKO;AACN,MAAA,KAAI,CAAC,KAAL,CAAW,GAAX,CAAe,MAAf;AACA;AACD,GAhCO;;AAkCQ,OAAA,KAAA,GAAQ,YAAK;AAC5B,QAAM,OAAO,GAAG,IAAI,GAAJ,EAAhB;;AACA,uBAAI,KAAI,CAAC,MAAT,EAAiB,OAAjB,CAAyB,UAAA,KAAK,EAAG;AAChC,MAAA,OAAO,CAAC,KAAR;;AACA,yBAAI,KAAK,CAAC,cAAN,EAAJ,EAA4B,OAA5B,CAAoC,UAAA,KAAK,EAAG;AAC3C,YAAM,WAAW,GAAG,MAAA,CAAA,OAAA,CAAK,mBAAL,CACnB,KAAK,CAAC,SAAN,EADmB,EAEnB,KAAK,CAAC,cAAN,EAFmB,CAApB;AAIA,QAAA,WAAW,CAAC,OAAZ,CAAoB,UAAA,UAAU,EAAG;AAChC,cACC,OAAO,CAAC,GAAR,CAAY,UAAZ,KACA,UAAU,KAAK,MAAA,CAAA,OAAA,CAAK,OAFrB,EAGE;AACD,mBAAO,KAAP;AACA;AACD,SAPD;AAQA,OAbD;AAcA,KAhBD;;AAiBA,WAAO,IAAP;AACA,GApBe;;AAsBA,OAAA,WAAA,GAAc,YAAK;AAClC,QAAM,QAAQ,GAAG,IAAI,GAAJ,8BAAoB,KAAI,CAAC,KAAzB,IAAgC,MAAA,CAAA,OAAA,CAAK,OAArC,GAAjB,CADkC,CAElC;;AACA,QAAM,IAAI,GACT,SACA,mBAAI,QAAJ,EAAc,MAAd,CACC,UAAC,SAAD,EAAY,MAAZ;AAAA,aAAuB,SAAS,iBAAU,MAAV,UAAhC;AAAA,KADD,EAEC,iBAFD,CADA,GAKA,OAND,CAHkC,CAUlC;;AACA,QAAM,IAAI,GAAG,mBAAI,KAAI,CAAC,MAAT,EACX,GADW,CACP,UAAA,KAAK,EAAG;AACZ;AACA,UAAI,SAAJ;;AACA,UAAI,KAAI,CAAC,UAAL,KAAoB,KAAxB,EAA+B;AAC9B,QAAA,SAAS,+CAAsC,KAAK,CAAC,KAAN,EAAtC,cAAT;AACA,OAFD,MAEO,IAAI,KAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,KAAtB,CAAJ,EAAkC;AACxC,QAAA,SAAS,gDAAuC,KAAK,CAAC,KAAN,EAAvC,cAAT;AACA,OAFM,MAEA;AACN,QAAA,SAAS,yCAAgC,KAAK,CAAC,KAAN,EAAhC,cAAT;AACA,OATW,CAUZ;;;AACA,UAAI,eAAe,GAAW,EAA9B;AAXY;AAAA;AAAA;;AAAA;AAYZ,6BAAmB,QAAnB,8HAA6B;AAAA,cAApB,MAAoB;AAC5B,cAAM,YAAY,GAAG,KAAK,CACxB,sBADmB,CACI,MADJ,EAEnB,GAFmB,CAGnB,UAAA,UAAU;AAAA,6BACN,UAAU,CAAC,cAAX,GAA4B,KAA5B,EADM;AAAA,WAHS,EAMnB,IANmB,CAMd,IANc,CAArB;AAOA,cAAM,IAAI,kBACT,YAAY,CAAC,MAAb,GAAsB,CAAtB,GAA0B,YAA1B,GAAyC,GADhC,WAAV;AAGA,UAAA,eAAe,IAAI,IAAnB;AACA,SAxBW,CAyBZ;;AAzBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0BZ,2BAAc,SAAd,SAA0B,eAA1B;AACA,KA5BW,EA6BZ;AA7BY,KA8BX,IA9BW,CA8BN,EA9BM,CAAb;;AA+BA,4BAAiB,IAAjB,SAAwB,IAAxB;AACA,GA3Ce;;AArVf,OAAK,KAAL,GAAa,IAAI,GAAJ,EAAb;AACA,OAAK,KAAL,CAAW,KAAX;AACA,OAAK,MAAL,GAAc,IAAI,GAAJ,EAAd;AACA,OAAK,MAAL,CAAY,KAAZ;AACA,OAAK,UAAL,GAAkB,IAAlB;AACA,OAAK,YAAL,GAAoB,IAAI,GAAJ,EAApB;AACA,OAAK,YAAL,CAAkB,KAAlB;AACA,OAAK,IAAL,GAAY,IAAZ;AACA;;AA2XO,OAAA,CAAA,SAAA,GAAA,SAAA;;;;;;;;AC3bT,IAAA,WAAA,GAAA,OAAA,CAAA,0BAAA,CAAA,EAEA;;;AACA,IAAM,QAAQ,GAAgB,EAA9B;AACc,QAAQ,CAAC,aAAT,CAAuB,QAAvB,EAAkC,KAAlC,CAAwC,OAAxC,GAAkD,MAAlD;AACA,QAAQ,CAAC,aAAT,CAAuB,SAAvB,EAAmC,KAAnC,CAAyC,OAAzC,GAAmD,MAAnD,EAEd;;AACA,QAAQ,CAAC,aAAT,CAAuB,cAAvB,EAAuC,gBAAvC,CAAwD,OAAxD,EAAiE,YAAK;AACrE,MAAM,YAAY,GAAqB,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAAvC;AACA,MAAM,cAAc,GAAqB,QAAQ,CAAC,aAAT,CAAuB,SAAvB,CAAzC;AACA,MAAM,IAAI,GAAG,YAAY,CAAC,KAA1B;;AACA,MAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EAAuB;AACtB,IAAA,KAAK,CAAC,2CAAD,CAAL;AACA;AACA,GAHD,MAGO,IAAI,QAAQ,CAAC,IAAT,CAAc,UAAA,SAAS;AAAA,WAAI,SAAS,CAAC,OAAV,OAAwB,IAA5B;AAAA,GAAvB,CAAJ,EAA8D;AACpE,IAAA,KAAK,CAAC,uCAAD,CAAL;AACA;AACA;;AACD,MAAM,MAAM,GAAG,cAAc,CAAC,KAA9B;AACA,MAAM,OAAO,GAAG,MAAM,CAAC,KAAP,CAAa,GAAb,CAAhB;;AACA,UAAQ,OAAO,CAAC,MAAhB;AACC,SAAK,CAAL;AAAQ;AACP,YAAM,SAAS,GAAG,IAAI,WAAA,CAAA,SAAJ,CAAc,IAAd,CAAlB;AACA,QAAA,SAAS,CAAC,WAAV,CAAsB,OAAO,CAAC,CAAD,CAA7B;AACA,QAAA,QAAQ,CAAC,IAAT,CAAc,SAAd;AACA;AACA;;AAED,SAAK,CAAL;AAAQ;AACP,YAAI,OAAO,CAAC,IAAR,CAAa,UAAA,OAAO;AAAA,iBAAI,OAAO,CAAC,MAAR,KAAmB,CAAvB;AAAA,SAApB,CAAJ,EAAmD;AAClD,UAAA,KAAK,CAAC,qDAAD,CAAL;AACA;AACA;;AACD,YAAM,UAAS,GAAG,IAAI,WAAA,CAAA,SAAJ,CAAc,IAAd,CAAlB;;AACA,QAAA,UAAS,CAAC,WAAV,CAAsB,OAAO,CAAC,CAAD,CAA7B,EAAkC,OAAO,CAAC,CAAD,CAAzC;;AACA,QAAA,QAAQ,CAAC,IAAT,CAAc,UAAd;AACA;AACA;;AAED;AAAS;AACR,QAAA,KAAK,CAAC,sCAAD,CAAL;AACA;AACA;AAtBF;;AAyBA,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAnB;AACA,EAAA,UAAU,CAAC,IAAX,GAAkB,IAAlB;AACA,EAAA,UAAU,CAAC,KAAX,GAAmB,IAAnB;AACA,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAnB;AACA,EAAA,UAAU,CAAC,IAAX,GAAkB,IAAlB;AACA,EAAA,UAAU,CAAC,KAAX,GAAmB,IAAnB;AACA,MAAM,gBAAgB,GACrB,QAAQ,CAAC,aAAT,CAAuB,YAAvB,CADD;AAGA,MAAM,aAAa,GAClB,QAAQ,CAAC,aAAT,CAAuB,mBAAvB,CADD;AAGA,EAAA,gBAAgB,CAAC,WAAjB,CAA6B,UAA7B;AACA,EAAA,gBAAgB,CAAC,KAAjB,GAAyB,IAAzB;AACA,EAAA,aAAa,CAAC,WAAd,CAA0B,UAA1B;AACA,EAAA,YAAY,CAAC,KAAb,GAAqB,EAArB;AACA,EAAA,cAAc,CAAC,KAAf,GAAuB,EAAvB;AACA,CAvDD,GAyDA;;AACA,QAAQ,CACN,aADF,CACgB,YADhB,EAEE,gBAFF,CAEmB,iBAFnB,EAEsC,UAAA,KAAK,EAAG;AAC5C,MAAM,QAAQ,GAAsB,KAAK,CAAC,MAA1C;;AACA,MAAI,QAAQ,CAAC,iBAAT,KAA+B,CAAnC,EAAsC;AACrC;AACA;;AACD,EAAA,QAAQ,CAAC,aAAT,CAAuB,kBAAvB,EAA2C,SAA3C,GAAuD,QAAQ,CAC7D,IADqD,CAChD,UAAA,SAAS;AAAA,WAAI,SAAS,CAAC,OAAV,OAAwB,QAAQ,CAAC,KAArC;AAAA,GADuC,EAErD,WAFqD,EAAvD;AAGc,EAAA,QAAQ,CAAC,aAAT,CAAuB,QAAvB,EAAkC,KAAlC,CAAwC,OAAxC,GACb,cADa;AAEd,CAZF;AAaA,QAAQ,CAAC,aAAT,CAAuB,YAAvB,EAAqC,gBAArC,CAAsD,QAAtD,EAAgE,UAAA,KAAK,EAAG;AACvE,MAAM,IAAI,GAAuB,KAAK,CAAC,MAAN,CAAc,KAA/C;AACA,EAAA,QAAQ,CAAC,aAAT,CAAuB,kBAAvB,EAA2C,SAA3C,GAAuD,QAAQ,CAC7D,IADqD,CAChD,UAAA,SAAS;AAAA,WAAI,SAAS,CAAC,OAAV,OAAwB,IAA5B;AAAA,GADuC,EAErD,WAFqD,EAAvD;AAGA,CALD,GAOA;;AACA,QAAQ,CAAC,aAAT,CAAuB,YAAvB,EAAqC,gBAArC,CAAsD,QAAtD,EAAgE,UAAA,KAAK,EAAG;AACvE,MAAM,SAAS,GAAuB,KAAK,CAAC,MAAN,CAAc,KAApD;;AACA,MAAI,SAAS,KAAK,SAAd,IAA2B,SAAS,KAAK,eAA7C,EAA8D;AAC/C,IAAA,QAAQ,CAAC,aAAT,CAAuB,SAAvB,EAAmC,KAAnC,CAAyC,OAAzC,GACb,cADa;AAGb,IAAA,QAAQ,CAAC,aAAT,CAAuB,mBAAvB,CADmB,CAEjB,KAFiB,CAEX,OAFW,GAED,MAFC;AAGpB,GAND,MAMO;AACQ,IAAA,QAAQ,CAAC,aAAT,CAAuB,SAAvB,EAAmC,KAAnC,CAAyC,OAAzC,GAAmD,MAAnD;AAEb,IAAA,QAAQ,CAAC,aAAT,CAAuB,mBAAvB,CADmB,CAEjB,KAFiB,CAEX,OAFW,GAED,SAFC;AAGpB;AACD,CAdD,GAgBA;;AACA,QAAQ,CAAC,aAAT,CAAuB,mBAAvB,EAA4C,gBAA5C,CAA6D,OAA7D,EAAsE,YAAK;AAC1E,MAAM,SAAS,GAAuB,QAAQ,CAAC,aAAT,CAAuB,YAAvB,EACpC,KADF;AAEA,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAT,CAAc,UAAA,CAAC,EAAG;AACnC,QAAM,IAAI,GAAuB,QAAQ,CAAC,aAAT,CAAuB,YAAvB,EAC/B,KADF;AAEA,WAAO,CAAC,CAAC,OAAF,OAAgB,IAAvB;AACA,GAJiB,CAAlB;AAMA,EAAA,SAAS,CAAC,SAAD,CAAT;AACA,EAAA,QAAQ,CAAC,aAAT,CACC,kBADD,EAEE,SAFF,GAEc,SAAS,CAAC,WAAV,EAFd;AAGA,CAbD,GAeA;;AACA,QAAQ,CAAC,aAAT,CAAuB,mBAAvB,EAA4C,gBAA5C,CAA6D,OAA7D,EAAsE,YAAK;AAC1E,MAAM,SAAS,GAAuB,QAAQ,CAAC,aAAT,CAAuB,YAAvB,EACpC,KADF;AAEA,MAAM,EAAE,GAAG,QAAQ,CAAC,IAAT,CAAc,UAAA,CAAC,EAAG;AAC5B,QAAM,IAAI,GAAuB,QAAQ,CAAC,aAAT,CAAuB,YAAvB,EAC/B,KADF;AAEA,WAAO,CAAC,CAAC,OAAF,OAAgB,IAAvB;AACA,GAJU,CAAX;AAKA,MAAM,EAAE,GAAG,QAAQ,CAAC,IAAT,CAAc,UAAA,CAAC,EAAG;AAC5B,QAAM,IAAI,GACT,QAAQ,CAAC,aAAT,CAAuB,mBAAvB,CADgC,CAE9B,KAFH;AAGA,WAAO,CAAC,CAAC,OAAF,OAAgB,IAAvB;AACA,GALU,CAAX;AAOA,MAAM,IAAI,GAAc,EAAE,CAAC,IAAH,EAAxB;AACA,EAAA,EAAE,CAAC,SAAD,CAAF,CAAc,IAAd;AACA,EAAA,QAAQ,CAAC,aAAT,CAAuB,kBAAvB,EAA2C,SAA3C,GAAuD,EAAE,CAAC,WAAH,EAAvD;AACA,CAlBD","file":"main.c39d6dcf.map","sourceRoot":"..","sourcesContent":["import { Transition } from \"../Transition/Transition\";\r\nclass State {\r\n\tprivate id: number;\r\n\tprivate transitions: Set<Transition>;\r\n\r\n\t/**\r\n\t * Crea un estado.\r\n\t *\r\n\t * @param id {identidiacdor del estado}\r\n\t */\r\n\tconstructor(id: number) {\r\n\t\tthis.id = id;\r\n\t\tthis.transitions = new Set<Transition>();\r\n\t}\r\n\r\n\tpublic readonly getId = () => this.id;\r\n\tpublic readonly getTransitions = () => this.transitions;\r\n\r\n\tpublic readonly setId = id => {\r\n\t\tthis.id = id;\r\n\t};\r\n\r\n\t/**\r\n\t * Agrega una transición al conjunto de transiciones del estado.\r\n\t *\r\n\t * @param {Transition} t {transición a ser agregada}\r\n\t * @memberof State\r\n\t */\r\n\tpublic readonly addTransition = (t: Transition) => {\r\n\t\tthis.transitions.add(t);\r\n\t};\r\n\r\n\t/**\r\n\t * Obtiene el subconjunto del conjunto de transiciones que tengan el símbolo symbol.\r\n\t *\r\n\t * @param {string} symbol {símbolo con el que se hace la transición}\r\n\t * @memberof State\r\n\t */\r\n\tpublic getTransitionsBySymbol = (symbol: string) => {\r\n\t\treturn [...this.transitions].filter(transition => {\r\n\t\t\tif (transition.hasLimitSymbol()) {\r\n\t\t\t\treturn symbol.length === 1\r\n\t\t\t\t\t? transition.getSymbol() <= symbol &&\r\n\t\t\t\t\t\t\tsymbol <= transition.getLimitSymbol()\r\n\t\t\t\t\t: false;\r\n\t\t\t} else {\r\n\t\t\t\treturn transition.getSymbol() === symbol;\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n}\r\n\r\nexport { State };\r\n","import { State } from \"../State/State\";\r\n\r\nclass Transition {\r\n\tprivate symbol: string;\r\n\tprivate limitSymbol: string;\r\n\tprivate targetState: State;\r\n\r\n\tconstructor(symbol: string, targetState: State, limitSymbol?: string) {\r\n\t\t// Se establece el símbolo límite (para rangos), si existe.\r\n\t\tif (limitSymbol) {\r\n\t\t\tif (symbol.length != 1 || limitSymbol.length != 1) {\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t\"La longitud de ambos símbolos para un rango debe ser 1\"\r\n\t\t\t\t);\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif (limitSymbol.charCodeAt(0) <= symbol.charCodeAt(0)) {\r\n\t\t\t\tconsole.log(\"No es posible crear la transición con ese rango.\");\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tthis.limitSymbol = limitSymbol;\r\n\t\t} else {\r\n\t\t\tthis.limitSymbol = null;\r\n\t\t}\r\n\t\t// Se agrega el símbolo principal de la transición.\r\n\t\tthis.symbol = symbol;\r\n\t\t// Se establece el estado objetivo.\r\n\t\tthis.targetState = targetState;\r\n\t}\r\n\r\n\tpublic readonly getSymbol = () => this.symbol;\r\n\tpublic readonly getLimitSymbol = () => this.limitSymbol;\r\n\tpublic readonly getTargetState = () => this.targetState;\r\n\r\n\thasLimitSymbol = () => {\r\n\t\treturn this.limitSymbol ? true : false;\r\n\t};\r\n}\r\nexport { Transition };\r\n","import { Automaton } from \"../Automaton/Automaton\";\r\nimport { State } from \"../State/State\";\r\nimport { Transition } from \"../Transition/Transition\";\r\n\r\nnamespace Misc {\r\n\texport const EPSILON: string = \"\\u03B5\";\r\n\r\n\t/**\r\n\t * Función Ir_a(). Aplica la función Mover() con los parámetros\r\n\t * \"states\" que es un conjunto de estados y \"symbol\" que es un\r\n\t * símbolo. Al resultado se le\r\n\t *\r\n\t *\r\n\t * @param {Set<State>} states\r\n\t * @param {string} symbol\r\n\t * @returns {Set<State>}\r\n\t */\r\n\texport const goTo = (states: Set<State>, symbol: string) => {\r\n\t\tlet S: Set<State>;\r\n\t\tS = epsilonClosure(move(states, symbol));\r\n\t\treturn S;\r\n\t};\r\n\r\n\t/**\r\n\t * Función Mover(). Obtiene el conjunto de estados al que se\r\n\t * puede acceder desde otro conjunto de estados \"states\"\r\n\t * estrictamente mediante transiciones con un símbolo \"symbol\"\r\n\t * dado.\r\n\t *\r\n\t * @param {Set<State>} setOfStates\r\n\t * @param {string} symbol\r\n\t * @returns {Set<State>}\r\n\t */\r\n\texport const move = (states: Set<State>, symbol: string) => {\r\n\t\tconst result = [...states].map(state => simpleMove(state, symbol));\r\n\t\treturn result.reduce((union, set) => {\r\n\t\t\tset.forEach(state => {\r\n\t\t\t\tunion.add(state);\r\n\t\t\t});\r\n\t\t\treturn union;\r\n\t\t}, new Set<State>());\r\n\t};\r\n\r\n\tconst simpleMove = (state: State, symbol: string) => {\r\n\t\treturn new Set<State>(\r\n\t\t\t[...state.getTransitions().values()]\r\n\t\t\t\t.filter(transition => transition.getSymbol() === symbol)\r\n\t\t\t\t.map(transition => transition.getTargetState())\r\n\t\t);\r\n\t};\r\n\r\n\t/**\r\n\t * Obtiene la cerradura épsilon de un conjunto de estados.\r\n\t *\r\n\t * @param {Set<State>} states\r\n\t * @returns {Set<State>}\r\n\t */\r\n\texport const epsilonClosure = (states: Set<State>) => {\r\n\t\tconst epsilonSets = [...states].map(simpleEpsilonClosure);\r\n\t\treturn epsilonSets.reduce((union, set) => {\r\n\t\t\tset.forEach(state => {\r\n\t\t\t\tunion.add(state);\r\n\t\t\t});\r\n\t\t\treturn union;\r\n\t\t}, new Set<State>());\r\n\t};\r\n\r\n\t/**\r\n\t * Obtiene la cerradura épsilon de un estado.\r\n\t *\r\n\t * @param {State} state\r\n\t * @returns {Set<State>}\r\n\t */\r\n\tconst simpleEpsilonClosure = (state: State) => {\r\n\t\treturn new Set<State>(\r\n\t\t\t[...state.getTransitions().values()]\r\n\t\t\t\t.filter(transition => transition.getSymbol() === EPSILON)\r\n\t\t\t\t.map(transition => transition.getTargetState())\r\n\t\t);\r\n\t};\r\n\r\n\texport /**\r\n\t *\r\n\t *\r\n\t * @param {string} symbol\r\n\t * @param {string} limitSymbol\r\n\t * @returns\r\n\t */\r\n\tconst getSymbolsFromRange = (symbol: string, limitSymbol: string) => {\r\n\t\tif (symbol.length !== 1 || limitSymbol.length !== 1) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst begin = symbol.charCodeAt(0);\r\n\t\tconst end = limitSymbol.charCodeAt(0);\r\n\t\tconst symbols: string[] = [];\r\n\t\tfor (let ascii = begin; ascii <= end; ascii++) {\r\n\t\t\tsymbols.push(String.fromCharCode(ascii));\r\n\t\t}\r\n\t\treturn symbols;\r\n\t};\r\n\r\n\t/**\r\n\t * Para el análisis léxico, tomamos el último estado de aceptación\r\n\t * con el que se obtuvo un token y se guarda el índice hasta que, con\r\n\t * caracteres siguientes, no se pueda hacer otra transición.\r\n\t *\r\n\t * En ese momento, se corta la cadena hasta el índice con el que se tuvo el\r\n\t * último token y se empieza el proceso de nuevo.\r\n\t *\r\n\t *\r\n\t * LIBRO: Compiler design in C.\r\n\t */\r\n}\r\n\r\nexport default Misc;\r\n","import { State } from \"../State/State\";\r\nimport { Transition } from \"../Transition/Transition\";\r\nimport Misc from \"../Misc/Misc\";\r\n\r\nclass Automaton {\r\n\t/**\r\n\t * Nombre que se le asignará al autómata cuando se cree.\r\n\t *\r\n\t * @private\r\n\t * @type {string}\r\n\t * @memberof Automaton\r\n\t */\r\n\tprivate name: string;\r\n\r\n\t/**\r\n\t * Alfabeto del autómata.\r\n\t *\r\n\t * @private\r\n\t * @type {Set<string>}\r\n\t * @memberof Automaton\r\n\t */\r\n\tprivate sigma: Set<string>;\r\n\r\n\t/**\r\n\t * Conjunto de estados del autómata.\r\n\t *\r\n\t * @private\r\n\t * @type {Set<State>}\r\n\t * @memberof Automaton\r\n\t */\r\n\tprivate states: Set<State>;\r\n\r\n\t/**\r\n\t * Estado inicial del autómata.\r\n\t *\r\n\t * @private\r\n\t * @type {State}\r\n\t * @memberof Automaton\r\n\t */\r\n\tprivate startState: State;\r\n\r\n\t/**\r\n\t * Conjunto de estados de aceptación del autómata.\r\n\t *\r\n\t * @private\r\n\t * @type {Set<State>}\r\n\t * @memberof Automaton\r\n\t */\r\n\tprivate acceptStates: Set<State>;\r\n\r\n\t/**\r\n\t * Genera un autómata vacío.\r\n\t *\r\n\t * @memberof Automaton\r\n\t */\r\n\tconstructor(name: string) {\r\n\t\tthis.sigma = new Set<string>();\r\n\t\tthis.sigma.clear();\r\n\t\tthis.states = new Set<State>();\r\n\t\tthis.states.clear();\r\n\t\tthis.startState = null;\r\n\t\tthis.acceptStates = new Set<State>();\r\n\t\tthis.acceptStates.clear();\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tpublic readonly getName = () => this.name;\r\n\tpublic readonly getSigma = () => this.sigma;\r\n\tpublic readonly getStates = () => this.states;\r\n\tpublic readonly getStartState = () => this.startState;\r\n\tpublic readonly getAcceptStates = () => this.acceptStates;\r\n\r\n\t/**\r\n\t * Crea un autómata básico de una transición con el símbolo symbol.\r\n\t *\r\n\t * @param {string} symbol {es el símbolo con el que se genera la transición}\r\n\t * @param {string} [limitSymbol] {es un símbolo opcional que delimita el rango [symbol, limitSymbol]}\r\n\t * @memberof Automaton\r\n\t */\r\n\tpublic readonly createBasic = (symbol: string, limitSymbol?: string) => {\r\n\t\tlet state0, state1;\r\n\t\tif (this.states.size == 0) {\r\n\t\t\tstate0 = new State(0);\r\n\t\t\tstate1 = new State(1);\r\n\t\t} else {\r\n\t\t\tstate0 = new State(this.states.size);\r\n\t\t\tstate1 = new State(this.states.size + 1);\r\n\t\t}\r\n\t\tconst transition = new Transition(symbol, state1, limitSymbol);\r\n\t\tstate0.addTransition(transition);\r\n\r\n\t\t// Se agregan los símbolos que abarca el rango (symbol, limitSymbol) a sigma.\r\n\t\tif (transition.hasLimitSymbol()) {\r\n\t\t\tconst symbols = Misc.getSymbolsFromRange(symbol, limitSymbol);\r\n\t\t\tsymbols.forEach(symbol => {\r\n\t\t\t\tthis.sigma.add(symbol);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.sigma.add(symbol);\r\n\t\t}\r\n\r\n\t\t// Agregamos los estados a los conjuntos y establecemos estados inicial y finales.\r\n\t\tthis.states.add(state0);\r\n\t\tthis.states.add(state1);\r\n\t\tthis.startState = state0;\r\n\t\tthis.acceptStates.add(state1);\r\n\t};\r\n\r\n\t/**\r\n\t * Une un autómata a otro conservando la integridad de las transiciones.\r\n\t * Guarda la unión mutando al autómata this.\r\n\t *\r\n\t * @param {Automaton} automaton {es el automata que se va a unir con this}\r\n\t * @memberof Automaton\r\n\t */\r\n\tpublic readonly unirAFN = (automaton: Automaton) => {\r\n\t\tlet stateIni = new State(this.states.size + automaton.states.size);\r\n\t\tlet stateEnd = new State(this.states.size + automaton.states.size + 1);\r\n\r\n\t\tconst finalTransition = new Transition(Misc.EPSILON, stateEnd);\r\n\t\tconst initialTransitionAFN_1 = new Transition(\r\n\t\t\tMisc.EPSILON,\r\n\t\t\tthis.startState\r\n\t\t);\r\n\t\tconst initialTransitionAFN_2 = new Transition(\r\n\t\t\tMisc.EPSILON,\r\n\t\t\tautomaton.startState\r\n\t\t);\r\n\t\t// Se agrega la transición final nueva a todos los estados finales del AFN this.\r\n\t\t[...this.acceptStates].forEach(acceptState => {\r\n\t\t\tacceptState.addTransition(finalTransition);\r\n\t\t});\r\n\t\t// Se agrega la transición final nueva a todos los estados finales del AFN que recibimos como parametro.\r\n\t\t[...automaton.acceptStates].forEach(acceptState => {\r\n\t\t\tacceptState.addTransition(finalTransition);\r\n\t\t});\r\n\t\t// Se limpia el conjunto de estados finales.\r\n\t\tthis.acceptStates.clear();\r\n\t\t// Y se reemplaza solo por el nuevo estado final.\r\n\t\tthis.acceptStates.add(stateEnd);\r\n\r\n\t\t// Reasignamos id a estados del autómata argumento y los agregamos al\r\n\t\t// conjunto de estados de autómata this.\r\n\t\tconst newStates = [...automaton.states];\r\n\t\tnewStates.forEach((state, index) => {\r\n\t\t\tstate.setId(this.states.size + index);\r\n\t\t});\r\n\t\tnewStates.forEach(state => {\r\n\t\t\tthis.states.add(state);\r\n\t\t});\r\n\r\n\t\t//Se agregan los simbolos del AFN2 al AFN1\r\n\t\t[...automaton.sigma].forEach(symbol => {\r\n\t\t\tthis.sigma.add(symbol);\r\n\t\t});\r\n\t\t// Se agregan los estados nuevos al conjunto de estados.\r\n\t\tthis.states.add(stateIni);\r\n\t\tthis.states.add(stateEnd);\r\n\r\n\t\t// Se reemplaza el nuevo estado inicial.\r\n\t\tthis.startState = stateIni;\r\n\t\t// Se le agregan las transiciones al inicio antiguo del autómata y al final del mismo.\r\n\t\tthis.startState.addTransition(initialTransitionAFN_1);\r\n\t\tthis.startState.addTransition(initialTransitionAFN_2);\r\n\t\t// Se agregan los símbolos que abarca el rango (symbol, limitSymbol) a sigma.\r\n\t};\r\n\r\n\t/**\r\n\t * Concatena al autómata mismo con un automata \"autómaton\" dado y guarda\r\n\t * el resultado mutando el autómata this.\r\n\t *\r\n\t * @param {Automaton} automaton\r\n\t * @memberof Automaton\r\n\t */\r\n\tpublic readonly concatenarAFN = (automaton: Automaton) => {\r\n\t\t// Capturamos los estados de automaton excluyendo el inicial.\r\n\t\tconst incomingStates = [...automaton.getStates()].filter(\r\n\t\t\tstate => state !== automaton.startState\r\n\t\t);\r\n\r\n\t\t// Re-indexamos los id's de esos estados.\r\n\t\tincomingStates.forEach((state, index) => {\r\n\t\t\tstate.setId(this.states.size + index);\r\n\t\t});\r\n\r\n\t\t//Agregamos las transiciones del estado inicial de automaton al final de this.\r\n\t\t[...automaton.startState.getTransitions()].forEach(transition => {\r\n\t\t\t[...this.acceptStates][0].addTransition(transition);\r\n\t\t});\r\n\r\n\t\tfor (let i = 0; i < automaton.sigma.size; i++) {\r\n\t\t\tthis.sigma.add([...automaton.sigma][i]);\r\n\t\t}\r\n\r\n\t\tincomingStates.forEach(state => {\r\n\t\t\tthis.states.add(state);\r\n\t\t});\r\n\r\n\t\tthis.acceptStates.clear();\r\n\t\tthis.acceptStates.add([...automaton.acceptStates][0]);\r\n\t};\r\n\t/**\r\n\t * Hace opcional al autómata.\r\n\t *\r\n\t * @memberof Automaton\r\n\t */\r\n\tpublic readonly makeOptional = () => {\r\n\t\t// Se crea el estado inicial auxiliar.\r\n\t\tconst nextBeginState = new State(this.states.size);\r\n\t\t// Se crea el estado final auxiliar.\r\n\t\tconst nextFinalState = new State(this.states.size + 1);\r\n\t\t// Se crea transición épsilon que va al estado final.\r\n\t\tconst finalTransition = new Transition(Misc.EPSILON, nextFinalState);\r\n\t\t// Se crea transición épsilon que partirá del nuevo estado inicial.\r\n\t\tconst firstTransition = new Transition(Misc.EPSILON, this.startState);\r\n\t\t// Se agrega la transición final nueva a todos los estados finales.\r\n\t\t[...this.states]\r\n\t\t\t.filter(state => this.acceptStates.has(state))\r\n\t\t\t.forEach(acceptState => {\r\n\t\t\t\tacceptState.addTransition(finalTransition);\r\n\t\t\t});\r\n\t\t// Se limpia el conjunto de estados finales.\r\n\t\tthis.acceptStates.clear();\r\n\t\t// Y se reemplaza solo por el nuevo estado final.\r\n\t\tthis.acceptStates.add(nextFinalState);\r\n\t\t// Se agregan los estados nuevos al conjunto de estados.\r\n\t\tthis.states.add(nextBeginState);\r\n\t\tthis.states.add(nextFinalState);\r\n\t\t// Se reemplaza el nuevo estado inicial.\r\n\t\tthis.startState = nextBeginState;\r\n\t\t// Se le agregan las transiciones al inicio antiguo del autómata y al final del mismo.\r\n\t\tthis.startState.addTransition(firstTransition);\r\n\t\tthis.startState.addTransition(finalTransition);\r\n\t};\r\n\r\n\t/**\r\n\t * Hace positivo al autómata.\r\n\t *\r\n\t * @memberof Automaton\r\n\t */\r\n\tpublic readonly makePositive = () => {\r\n\t\t// Nos aseguramos de que solo haya un estado final.\r\n\t\tif (this.acceptStates.size != 1) {\r\n\t\t\tconsole.log(\"El autómata no tiene un único estado final.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Se crea el estado inicial auxiliar.\r\n\t\tconst nextBeginState = new State(this.states.size);\r\n\t\t// Se crea el estado final auxiliar.\r\n\t\tconst nextFinalState = new State(this.states.size + 1);\r\n\t\t// Se crea transición épsilon que va al estado final.\r\n\t\tconst finalTransition = new Transition(Misc.EPSILON, nextFinalState);\r\n\t\t// Se crea transición épsilon que va hacia el viejo estado inicial.\r\n\t\tconst toPrevStartTransition = new Transition(\r\n\t\t\tMisc.EPSILON,\r\n\t\t\tthis.startState\r\n\t\t);\r\n\r\n\t\t// Agregamos transiciones a los respectivos estados.\r\n\t\tconst prevFinalState = [...this.acceptStates][0];\r\n\t\tprevFinalState.addTransition(toPrevStartTransition);\r\n\t\tprevFinalState.addTransition(finalTransition);\r\n\r\n\t\tnextBeginState.addTransition(toPrevStartTransition);\r\n\t\tthis.acceptStates.clear();\r\n\t\tthis.acceptStates.add(nextFinalState);\r\n\t\tthis.startState = nextBeginState;\r\n\t\tthis.states.add(nextBeginState);\r\n\t\tthis.states.add(nextFinalState);\r\n\t};\r\n\r\n\t/**\r\n\t * Hace Kleene al autómata.\r\n\t *\r\n\t * @memberof Automaton\r\n\t */\r\n\tpublic readonly makeKleene = () => {\r\n\t\t// Se hace la cerradura positiva del autómata\r\n\t\tthis.makePositive();\r\n\t\tconst transitionToEnd = new Transition(\r\n\t\t\tMisc.EPSILON,\r\n\t\t\t[...this.acceptStates][0]\r\n\t\t);\r\n\t\t// Se agrega la transición épsilon del inicio al fin del autómata.\r\n\t\tthis.startState.addTransition(transitionToEnd);\r\n\t};\r\n\r\n\t/**\r\n\t * Crea una copia exacta de sí mismo sin ninguna depndencia en referencias.\r\n\t *\r\n\t * @memberof Automaton\r\n\t * @returns {Automaton}\r\n\t */\r\n\tpublic readonly copy = () => {\r\n\t\t// Creamos un autómata con el mismo nombre.\r\n\t\tconst copy = new Automaton(this.name);\r\n\r\n\t\t// Creamos estados y transiciones así como el sigma del nuevo autómata según corresponda.\r\n\t\t[...this.getStates()].forEach(state => {\r\n\t\t\t[...state.getTransitions()].forEach(transition => {\r\n\t\t\t\tcopy.createTransition(\r\n\t\t\t\t\tstate.getId(),\r\n\t\t\t\t\ttransition.getSymbol(),\r\n\t\t\t\t\ttransition.getLimitSymbol(),\r\n\t\t\t\t\ttransition.getTargetState().getId()\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t});\r\n\t\t// Indicamos cuál estado del nuevo autómata es el inicial.\r\n\t\tcopy.startState = [...copy.getStates()].find(\r\n\t\t\tstate => state.getId() === this.getStartState().getId()\r\n\t\t);\r\n\t\t// Indicamos cuáles estados del nuevo autómata son de aceptación.\r\n\t\t[...this.getAcceptStates()].forEach(acceptState => {\r\n\t\t\tcopy.getAcceptStates().add(\r\n\t\t\t\t[...copy.getStates()].find(\r\n\t\t\t\t\tstate => state.getId() === acceptState.getId()\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn copy;\r\n\t};\r\n\r\n\t/**\r\n\t * Método para crear una transición de un estado de origen a unodestino con un símbolo o\r\n\t * un rango de símbolos.\r\n\t *\r\n\t * Si los identificadores no corresponden a algúno de los estados del conjunto de\r\n\t * estados del autómata, se creará.\r\n\t *\r\n\t * Helper para Automaton.copy()\r\n\t *\r\n\t * @private\r\n\t * @param {number} originStateID\r\n\t * @param {string} symbol\r\n\t * @param {string} limitSymbol\r\n\t * @param {number} targetStateID\r\n\t * @memberof Automaton\r\n\t */\r\n\tprivate createTransition = (\r\n\t\toriginStateID: number,\r\n\t\tsymbol: string,\r\n\t\tlimitSymbol: string,\r\n\t\ttargetStateID: number\r\n\t) => {\r\n\t\tlet originState = [...this.states].find(\r\n\t\t\tstate => state.getId() === originStateID\r\n\t\t);\r\n\t\tlet targetState = [...this.states].find(\r\n\t\t\tstate => state.getId() === targetStateID\r\n\t\t);\r\n\t\tif (!originState) {\r\n\t\t\toriginState = new State(originStateID);\r\n\t\t\tthis.states.add(originState);\r\n\t\t}\r\n\r\n\t\tif (!targetState) {\r\n\t\t\ttargetState = new State(targetStateID);\r\n\t\t\tthis.states.add(targetState);\r\n\t\t}\r\n\t\tconst transition = new Transition(symbol, targetState, limitSymbol);\r\n\t\toriginState.addTransition(transition);\r\n\r\n\t\tif (transition.hasLimitSymbol()) {\r\n\t\t\tconst symbols = Misc.getSymbolsFromRange(symbol, limitSymbol);\r\n\t\t\tsymbols.forEach(symbol => {\r\n\t\t\t\tthis.sigma.add(symbol);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.sigma.add(symbol);\r\n\t\t}\r\n\t};\r\n\r\n\tpublic readonly esAFD = () => {\r\n\t\tconst symbols = new Set<string>();\r\n\t\t[...this.states].forEach(state => {\r\n\t\t\tsymbols.clear();\r\n\t\t\t[...state.getTransitions()].forEach(trans => {\r\n\t\t\t\tconst tranSymbols = Misc.getSymbolsFromRange(\r\n\t\t\t\t\ttrans.getSymbol(),\r\n\t\t\t\t\ttrans.getLimitSymbol()\r\n\t\t\t\t);\r\n\t\t\t\ttranSymbols.forEach(tranSymbol => {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tsymbols.has(tranSymbol) ||\r\n\t\t\t\t\t\ttranSymbol === Misc.EPSILON\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn true;\r\n\t};\r\n\r\n\tpublic readonly toHTMLTable = () => {\r\n\t\tconst tmpSigma = new Set<string>([...this.sigma, Misc.EPSILON]);\r\n\t\t// Encabezado de la tabla.\r\n\t\tconst head =\r\n\t\t\t\"<tr>\" +\r\n\t\t\t[...tmpSigma].reduce(\r\n\t\t\t\t(tableHead, symbol) => tableHead + `<th>${symbol}</th>`,\r\n\t\t\t\t\"<th>Estado</th>\"\r\n\t\t\t) +\r\n\t\t\t\"</tr>\";\r\n\t\t// Cuerpo (filas) de la tabla.\r\n\t\tconst body = [...this.states]\r\n\t\t\t.map(state => {\r\n\t\t\t\t// Celda del estado actual.\r\n\t\t\t\tlet stateCell: string;\r\n\t\t\t\tif (this.startState === state) {\r\n\t\t\t\t\tstateCell = `<td class=\"state-cell start\"><p>${state.getId()}</p></td>`;\r\n\t\t\t\t} else if (this.acceptStates.has(state)) {\r\n\t\t\t\t\tstateCell = `<td class=\"state-cell accept\"><p>${state.getId()}</p></td>`;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstateCell = `<td class=\"state-cell\"><p>${state.getId()}</p></td>`;\r\n\t\t\t\t}\r\n\t\t\t\t// Resto de la fila.\r\n\t\t\t\tlet targetStatesRow: string = \"\";\r\n\t\t\t\tfor (let symbol of tmpSigma) {\r\n\t\t\t\t\tconst targetStates = state\r\n\t\t\t\t\t\t.getTransitionsBySymbol(symbol)\r\n\t\t\t\t\t\t.map(\r\n\t\t\t\t\t\t\ttransition =>\r\n\t\t\t\t\t\t\t\t`${transition.getTargetState().getId()}`\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.join(\", \");\r\n\t\t\t\t\tconst cell = `<td>{${\r\n\t\t\t\t\t\ttargetStates.length > 0 ? targetStates : \" \"\r\n\t\t\t\t\t}}</td>`;\r\n\t\t\t\t\ttargetStatesRow += cell;\r\n\t\t\t\t}\r\n\t\t\t\t//Fila completa.\r\n\t\t\t\treturn `<tr>${stateCell}${targetStatesRow}</tr>`;\r\n\t\t\t})\r\n\t\t\t// Se unen (concatenan) todas las filas\r\n\t\t\t.join(\"\");\r\n\t\treturn `<table>${head}${body}</table>`;\r\n\t};\r\n}\r\n\r\nexport { Automaton };\r\n","import { Automaton } from \"./ts/Automaton/Automaton\";\r\n\r\n// Arreglo de autómatas creados localmente.\r\nconst automata: Automaton[] = [];\r\n(<HTMLElement>document.querySelector(\"#tools\")).style.display = \"none\";\r\n(<HTMLElement>document.querySelector(\"#target\")).style.display = \"none\";\r\n\r\n// Listener para crear autómatas simples\r\ndocument.querySelector(\".btn-creator\").addEventListener(\"click\", () => {\r\n\tconst name_element = <HTMLInputElement>document.querySelector(\"#name\");\r\n\tconst symbol_element = <HTMLInputElement>document.querySelector(\"#symbol\");\r\n\tconst name = name_element.value;\r\n\tif (name.length === 0) {\r\n\t\talert(\"Debe ingresar un nombre para el autómata.\");\r\n\t\treturn;\r\n\t} else if (automata.find(automaton => automaton.getName() === name)) {\r\n\t\talert(\"Ingrese otro nombre para el autómata.\");\r\n\t\treturn;\r\n\t}\r\n\tconst symbol = symbol_element.value;\r\n\tconst symbols = symbol.split(\"-\");\r\n\tswitch (symbols.length) {\r\n\t\tcase 1: {\r\n\t\t\tconst automaton = new Automaton(name);\r\n\t\t\tautomaton.createBasic(symbols[0]);\r\n\t\t\tautomata.push(automaton);\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tcase 2: {\r\n\t\t\tif (symbols.find(_symbol => _symbol.length !== 1)) {\r\n\t\t\t\talert(\"El rango se da solamente con símbolos de longitud 1\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst automaton = new Automaton(name);\r\n\t\t\tautomaton.createBasic(symbols[0], symbols[1]);\r\n\t\t\tautomata.push(automaton);\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tdefault: {\r\n\t\t\talert(\"Inserte un símbolo o rango adecuado.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\tconst option_one = document.createElement(\"option\");\r\n\toption_one.text = name;\r\n\toption_one.value = name;\r\n\tconst option_two = document.createElement(\"option\");\r\n\toption_two.text = name;\r\n\toption_two.value = name;\r\n\tconst automaton_select = <HTMLSelectElement>(\r\n\t\tdocument.querySelector(\"#automaton\")\r\n\t);\r\n\tconst target_select = <HTMLSelectElement>(\r\n\t\tdocument.querySelector(\"#target-automaton\")\r\n\t);\r\n\tautomaton_select.appendChild(option_one);\r\n\tautomaton_select.value = name;\r\n\ttarget_select.appendChild(option_two);\r\n\tname_element.value = \"\";\r\n\tsymbol_element.value = \"\";\r\n});\r\n\r\n// Listeners para mostrar tabla de autómata según se seleccione.\r\ndocument\r\n\t.querySelector(\"#automaton\")\r\n\t.addEventListener(\"DOMNodeInserted\", event => {\r\n\t\tconst selector = <HTMLSelectElement>event.target;\r\n\t\tif (selector.childElementCount !== 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tdocument.querySelector(\"#automaton-table\").innerHTML = automata\r\n\t\t\t.find(automaton => automaton.getName() === selector.value)\r\n\t\t\t.toHTMLTable();\r\n\t\t(<HTMLElement>document.querySelector(\"#tools\")).style.display =\r\n\t\t\t\"inline-block\";\r\n\t});\r\ndocument.querySelector(\"#automaton\").addEventListener(\"change\", event => {\r\n\tconst name = (<HTMLSelectElement>event.target).value;\r\n\tdocument.querySelector(\"#automaton-table\").innerHTML = automata\r\n\t\t.find(automaton => automaton.getName() === name)\r\n\t\t.toHTMLTable();\r\n});\r\n\r\n// Listeners para controlar comportamiento de sección \"target\".\r\ndocument.querySelector(\"#operation\").addEventListener(\"change\", event => {\r\n\tconst operation = (<HTMLSelectElement>event.target).value;\r\n\tif (operation === \"unirAFN\" || operation === \"concatenarAFN\") {\r\n\t\t(<HTMLElement>document.querySelector(\"#target\")).style.display =\r\n\t\t\t\"inline-block\";\r\n\t\t(<HTMLButtonElement>(\r\n\t\t\tdocument.querySelector(\".btn-execute__one\")\r\n\t\t)).style.display = \"none\";\r\n\t} else {\r\n\t\t(<HTMLElement>document.querySelector(\"#target\")).style.display = \"none\";\r\n\t\t(<HTMLButtonElement>(\r\n\t\t\tdocument.querySelector(\".btn-execute__one\")\r\n\t\t)).style.display = \"initial\";\r\n\t}\r\n});\r\n\r\n// Listeners para realizar las operaciones unarias.\r\ndocument.querySelector(\".btn-execute__one\").addEventListener(\"click\", () => {\r\n\tconst operation = (<HTMLSelectElement>document.querySelector(\"#operation\"))\r\n\t\t.value;\r\n\tconst automaton = automata.find(a => {\r\n\t\tconst name = (<HTMLSelectElement>document.querySelector(\"#automaton\"))\r\n\t\t\t.value;\r\n\t\treturn a.getName() === name;\r\n\t});\r\n\r\n\tautomaton[operation]();\r\n\tdocument.querySelector(\r\n\t\t\"#automaton-table\"\r\n\t).innerHTML = automaton.toHTMLTable();\r\n});\r\n\r\n// Listeners para realizar las operaciones binarias.\r\ndocument.querySelector(\".btn-execute__two\").addEventListener(\"click\", () => {\r\n\tconst operation = (<HTMLSelectElement>document.querySelector(\"#operation\"))\r\n\t\t.value;\r\n\tconst a1 = automata.find(a => {\r\n\t\tconst name = (<HTMLSelectElement>document.querySelector(\"#automaton\"))\r\n\t\t\t.value;\r\n\t\treturn a.getName() === name;\r\n\t});\r\n\tconst a2 = automata.find(a => {\r\n\t\tconst name = (<HTMLSelectElement>(\r\n\t\t\tdocument.querySelector(\"#target-automaton\")\r\n\t\t)).value;\r\n\t\treturn a.getName() === name;\r\n\t});\r\n\r\n\tconst copy: Automaton = a2.copy();\r\n\ta1[operation](copy);\r\n\tdocument.querySelector(\"#automaton-table\").innerHTML = a1.toHTMLTable();\r\n});\r\n"]}